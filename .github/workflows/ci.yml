name: Build and Test PIUIO Kernel Module

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test-matrix: # Renamed job
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # === Test against runner's kernel and latest Ubuntu 22.04 HWE kernel ===
        kernel-headers-package:
          - linux-headers-generic         # Headers for the kernel the runner is using
          - linux-headers-generic-hwe-22.04 # Latest HWE kernel headers for Ubuntu 22.04 LTS
        # Add more specific, available packages here if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential kmod libelf-dev

      - name: Install specific kernel headers (${{ matrix.kernel-headers-package }})
        run: |
          echo "Attempting to install ${{ matrix.kernel-headers-package }}"
          sudo apt-get install -y -o Debug::pkgProblemResolver=yes ${{ matrix.kernel-headers-package }}

      - name: Determine Kernel Version and Build Directory
        id: find_kdir
        run: |
          HEADER_PKG="${{ matrix.kernel-headers-package }}"
          KDIR=""
          KV=""
          echo "Determining KDIR/KV for package: $HEADER_PKG"
          if [[ "$HEADER_PKG" == "linux-headers-generic" ]]; then
            KV=$(uname -r)
            echo "Package is generic, using runner's kernel version: $KV"
            if [[ -L "/lib/modules/$KV/build" || -d "/lib/modules/$KV/build" ]]; then
                KDIR="/lib/modules/$KV/build"
            elif [[ -d "/usr/src/linux-headers-$KV" ]]; then
                 KDIR="/usr/src/linux-headers-$KV"
            else
                echo "::error::Could not find build directory for runner's generic kernel $KV"
                ls -l /lib/modules/ /usr/src/ || true
                exit 1
            fi
          else
            SEARCH_PATTERN="linux-headers-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-generic"
            echo "Searching for installed HWE headers matching pattern: $SEARCH_PATTERN"
            FOUND_LIB_MODULES=$(ls -d /lib/modules/*-generic/build 2>/dev/null | grep -E "$SEARCH_PATTERN" | sort -V | tail -n 1)
            FOUND_USR_SRC=$(ls -d /usr/src/linux-headers-*-generic 2>/dev/null | grep -E "$SEARCH_PATTERN" | sort -V | tail -n 1)
            if [[ -n "$FOUND_LIB_MODULES" ]] && [[ -L "$FOUND_LIB_MODULES" || -d "$FOUND_LIB_MODULES" ]]; then
                 KDIR="$FOUND_LIB_MODULES"
                 KV=$(basename "$(dirname "$KDIR")")
                 echo "Found HWE KDIR via /lib/modules: $KDIR"
            elif [[ -n "$FOUND_USR_SRC" ]] && [[ -d "$FOUND_USR_SRC" ]]; then
                 KDIR="$FOUND_USR_SRC"
                 KV=$(basename "$KDIR" | sed 's/linux-headers-//')
                 echo "Found HWE KDIR via /usr/src: $KDIR"
            else
                 echo "::error::Could not find installed headers directory for $HEADER_PKG"
                 echo "Listing /usr/src:" ; ls -l /usr/src || true
                 echo "Listing /lib/modules:" ; ls -l /lib/modules || true
                 exit 1
            fi
          fi
          if [[ -n "$KDIR" ]] && { [[ -d "$KDIR" || -L "$KDIR" ]] || [[ -d "$KDIR/build" || -L "$KDIR/build" ]]; }; then
             echo "Using KDIR: $KDIR"
             echo "kdir_path=$KDIR" >> $GITHUB_OUTPUT
             echo "Using Kernel Version: $KV"
             echo "kernel_version=$KV" >> $GITHUB_OUTPUT
          else
             echo "::error::Determined KDIR ($KDIR) is invalid or does not exist."
             exit 1
          fi

      - name: Build PIUIO module for ${{ steps.find_kdir.outputs.kernel_version }}
        working-directory: mod # Assumes Makefile is in 'mod' subdirectory
        run: |
          echo "Building using KDIR: ${{ steps.find_kdir.outputs.kdir_path }}"
          make -C "${{ steps.find_kdir.outputs.kdir_path }}" M="$PWD" modules

      # --- New Step: Runtime Load/Unload Test ---
      - name: Load/Unload Test (Native Kernel Only)
        # Only run this step if the build used the 'linux-headers-generic' package
        if: matrix.kernel-headers-package == 'linux-headers-generic'
        run: |
          MODULE_PATH="./mod/piuio_hid.ko" # Assuming this is the output path relative to repo root

          if [ ! -f "$MODULE_PATH" ]; then
            echo "::error::Kernel module file not found at $MODULE_PATH"
            exit 1
          fi

          echo "Attempting to load module built for native kernel (${{ steps.find_kdir.outputs.kernel_version }})..."
          # Use modprobe which handles dependencies, fall back to insmod if needed. Use -v for verbose.
          sudo modprobe -v "$MODULE_PATH" || {
            echo "::warning::modprobe failed, attempting insmod...";
            sudo insmod "$MODULE_PATH" || {
              echo "::error::insmod failed";
              sudo dmesg | tail -n 30; # Show more dmesg on failure
              exit 1;
            }
          }

          echo "Module loaded. Checking dmesg (last 30 lines)..."
          sleep 1 # Give dmesg time to potentially update
          sudo dmesg | tail -n 30

          echo "Attempting to unload module (piuio_hid)..."
          # Use the module name for rmmod
          sudo rmmod piuio_hid || {
            echo "::error::rmmod failed";
            sudo dmesg | tail -n 30;
            exit 1;
           }

          echo "Module unloaded. Checking dmesg (last 30 lines)..."
          sleep 1
          sudo dmesg | tail -n 30
          echo "Load/Unload test completed successfully."

