name: Build and Test PIUIO Kernel Module

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-test:
    name: Build and Test Kernel Module on Multiple Kernels
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        kernel_version: [native, "6.2.0-39-generic", "5.15.0-92-generic"]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Kernel Build Dependencies (${ { matrix.kernel_version } })
        # Install build tools, Sparse, and appropriate kernel headers
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git curl sparse bc  # build tools and Sparse
          # Install kernel headers for the target version
          if [ "${{ matrix.kernel_version }}" = "native" ]; then
            KERNEL_VER="$(uname -r)"
            sudo apt-get install -y "linux-headers-$(uname -r)"
          else
            KERNEL_VER="${{ matrix.kernel_version }}"
            sudo apt-get install -y "linux-headers-${{ matrix.kernel_version }}"
          fi
          echo "Using kernel version $KERNEL_VER for build"

      - name: Run Linux Coding Style Check (checkpatch.pl) [native only]
        if: ${{ matrix.kernel_version == 'native' }}
        run: |
          # Fetch the latest Linux kernel coding style checker
          curl -sL "https://raw.githubusercontent.com/torvalds/linux/master/scripts/checkpatch.pl" -o checkpatch.pl
          chmod +x checkpatch.pl
          # Run checkpatch on the module source files (do not fail the job on style warnings)
          ./checkpatch.pl --no-tree --file mod/*.c || true

      - name: Build Module with Sparse Analysis (${ { matrix.kernel_version } })
        working-directory: mod
        run: |
          # Build the PIUIO module against the specified kernel headers, with Sparse static analysis enabled
          make -C "/lib/modules/$KERNEL_VER/build" M="$PWD" C=2 modules
        env:
          # Use the matching kernel version for make (helpful if Makefile uses KVER)
          KVER: ${{ matrix.kernel_version == 'native' && env.UNAME || matrix.kernel_version }}
        # Note: C=2 enables extra Sparse checks during the kernel build process

      - name: Show Module Info (${ { matrix.kernel_version } })
        # Display information about the built .ko module file
        run: |
          MOD_PATH="mod/piuio.ko"
          if [ -f "$MOD_PATH" ]; then
            echo "Module built at $MOD_PATH:"
            sudo modinfo "$MOD_PATH"
          else
            echo "ERROR: Module file $MOD_PATH not found!" && exit 1
          fi

      - name: Load and Unload Module [native kernel only]
        if: ${{ matrix.kernel_version == 'native' }}
        run: |
          MOD_PATH="mod/piuio.ko"
          echo "::group::Loading module $MOD_PATH"
          sudo insmod "$MOD_PATH" || { echo "insmod failed, dmesg output:"; dmesg | tail -20; exit 1; }
          echo "::endgroup::"
          # Verify module is loaded
          sudo lsmod | grep -q piuio && echo "Module loaded successfully" || echo "Module not present in lsmod"
          # Unload the module and check for errors
          echo "::group::Unloading module piuio"
          sudo rmmod piuio || { echo "rmmod failed, dmesg output:"; dmesg | tail -20; exit 1; }
          echo "Module unloaded successfully"
          echo "::endgroup::"
